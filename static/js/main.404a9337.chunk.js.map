{"version":3,"sources":["Component/Cards/Card/Card.jsx","Component/Cards/Cards.js","api.js","Component/Chart/Chart.js","Component/CountryPicker/CountryPicker.jsx","Component/Footter/Footer.js","App.js","serviceWorker.js","index.js","Component/Cards/Cards.module.css","Component/CountryPicker/CountryPicker.module.css","Component/Cards/Card/Card.module.css","Component/Chart/Chart.module.css"],"names":["CardComponent","className","cardTitle","value","lastUpdate","cardSubtitle","Grid","item","xs","md","component","Card","cx","styles","card","CardContent","Typography","color","gutterBottom","variant","start","end","duration","separator","Date","toDateString","Cards","data","confirmed","recovered","deaths","country","container","spacing","justify","infected","url","fetchData","a","changeableUrl","axios","get","fetchDailyData","map","date","reportDate","total","fetchCountries","countries","name","Chart","useState","dailyData","setDailyData","useEffect","initialDailyData","fetchMyAPI","barChart","labels","datasets","label","backgroundColor","options","legend","display","title","text","scales","xAxes","gridLines","scaleLabel","labelString","fontColor","fontSize","ticks","yAxes","lineChart","toLocaleDateString","borderColor","fill","Countries","handleCountryChange","setCountries","fetchAPI","Form","formControl","box","Input","select","type","defaultValue","onChange","e","target","i","key","Footer","props","href","style","App","setState","state","bind","this","console","log","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message","module","exports"],"mappings":"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","file":"static/js/main.404a9337.chunk.js","sourcesContent":["import React from 'react';\nimport { Card, CardContent, Typography, Grid } from '@material-ui/core';\nimport CountUp from 'react-countup';\nimport cx from 'classnames';\n\nimport styles from './Card.module.css';\n\nconst CardComponent = ({ className, cardTitle, value, lastUpdate, cardSubtitle }) => (\n  <Grid item xs={10} md={3}  component={Card} className={cx(styles.card, className)}>\n    <CardContent>\n      <Typography color=\"textSecondary\" gutterBottom>\n        {cardTitle}\n      </Typography>\n      <Typography variant=\"h5\" component=\"h2\">\n        <CountUp start={0} end={value} duration={3} separator=\",\" />\n      </Typography>\n      <Typography color=\"textSecondary\">\n        {new Date(lastUpdate).toDateString()}\n      </Typography>\n      <Typography variant=\"body2\" component=\"p\">\n        {cardSubtitle}\n      </Typography>\n    </CardContent>\n  </Grid>\n);\n\nexport default CardComponent;","\nimport React from 'react';\nimport { Typography, Grid } from '@material-ui/core';\nimport CardComponent from './Card/Card';\nimport styles from './Cards.module.css';\n\nconst Cards = ({ data: { confirmed, recovered, deaths, lastUpdate } ,country}) => {\n  if (!confirmed) {\n    return 'Loading...';\n  }\n\n  return (\n    <div className={styles.container}>\n      <Grid container spacing={0} justify=\"center\">\n        <CardComponent\n          className={styles.infected}\n          cardTitle=\"Infected\"\n          value={confirmed.value}\n          lastUpdate={lastUpdate}\n          cardSubtitle=\"Number of active cases from COVID-19.\"\n        />\n        <CardComponent\n          className={styles.recovered}\n          cardTitle=\"Recovered\"\n          value={recovered.value}\n          lastUpdate={lastUpdate}\n          cardSubtitle=\"Number of recoveries from COVID-19.\"\n        />\n        <CardComponent\n          className={styles.deaths}\n          cardTitle=\"Deaths\"\n          value={deaths.value}\n          lastUpdate={lastUpdate}\n          cardSubtitle=\"Number of deaths caused by COVID-19.\"\n        />\n      </Grid>\n    </div>\n  );\n};\n\nexport default Cards;\n\n   \n\n","\nimport axios  from 'axios';\n\nconst url = 'https://covid19.mathdro.id/api';\n\nexport const fetchData = async (country) => {\n  let changeableUrl = url;\n\n  if (country) {\n    changeableUrl = `${url}/countries/${country}`;\n  }\n\n  try {\n    const { data: { confirmed, recovered, deaths, lastUpdate } } = await axios.get(changeableUrl);\n\n    return { confirmed, recovered, deaths, lastUpdate };\n  } catch (error) {\n    return error;\n  }\n};\n\nexport const fetchDailyData = async () => {\n      try {\n        const { data } = await axios.get(`${url}/daily`)\n        return data.map(({ confirmed, deaths, reportDate: date }) => ({ confirmed: confirmed.total, deaths: deaths.total, date }));\n      } catch (error) {\n        return error;\n      }\n    };\n\nexport const fetchCountries = async () => {\n    try {\n      const { data: { countries } } = await axios.get(`${url}/countries`);\n  \n      return countries.map((country) => country.name);\n    } catch (error) {\n      return error;\n    }\n  };","import React, { useState, useEffect } from 'react';\nimport { Line, Bar } from 'react-chartjs-2';\n\nimport { fetchDailyData } from '../../api';\n\nimport styles from './Chart.module.css';\n\nconst Chart = ({ data: { confirmed, recovered, deaths }, country }) => {\n  const [dailyData, setDailyData] = useState({});\n\n  useEffect(() => {\n    const fetchMyAPI = async () => {\n      const initialDailyData = await fetchDailyData();\n\n      setDailyData(initialDailyData);\n    };\n\n    fetchMyAPI();\n  }, []);\n\n  const barChart = (\n    confirmed ? (\n      <Bar\n        data={{\n          labels: ['Infected', 'Recovered', 'Deaths'],\n          datasets: [\n            {\n              label: 'People',\n              backgroundColor: ['rgba(0, 0, 255, 0.5)', 'rgba(0, 255, 0, 0.5)', 'rgba(255, 0, 0, 0.5)'],\n             \n              data: [confirmed.value, recovered.value, deaths.value],\n            },\n          ],\n        }}\n        options={{\n          legend: { display: false, },\n          title: { display: true, text: `Current state in ${country}` }, scales: {\n            xAxes: [{\n                display: true,gridLines: {\n                  display: true ,\n                  color: \"white\"\n                },\n                scaleLabel: {   // To format the scale Lebel\n                    display: true,\n                    labelString: 'X axe name',\n                    fontColor:'white',\n                    fontSize:10\n                },\n                ticks: {\n                   fontColor: \"white\", // To format the ticks, coming on the axis/lables which we are passing.\n                   fontSize: 14\n                  }\n            }],\n            yAxes: [{\n                display: true,gridLines: {\n                  display: true ,\n                  color: \"white\"\n                },\n                scaleLabel: {\n                    display: true,\n                    labelString: 'Y axe name',\n                    fontColor: 'white',\n                    fontSize:10\n                },\n                ticks: {\n                      fontColor: \"white\",\n                      fontSize: 5\n                }\n            }]\n     }\n        }}\n      />\n    ) : null\n  );\n\n  const lineChart = (\n    dailyData[0] ? (\n      <Line\n        data={{\n          labels: dailyData.map(({ date }) => new Date(date).toLocaleDateString()),\n          datasets: [{\n            data: dailyData.map((data) => data.confirmed),\n            label: 'Infected',\n            borderColor: '#3333ff',\n            fill: true,\n          }, {\n            data: dailyData.map((data) => data.deaths),\n            label: 'Deaths',\n            borderColor: 'red',\n            backgroundColor: 'rgba(255, 0, 0, 0.5)',\n            fill: true,\n          },  {\n            data: dailyData.map((data) => data.recovered),\n            label: 'Recovered',\n            borderColor: 'green',\n            backgroundColor: 'rgba(0, 255, 0, 0.5)',\n            fill: true,\n          },\n          ],\n        }} \n        options={{\n          legend: { display: true, },\n          scales: {\n            xAxes: [{\n                gridLines: {\n                  display: true ,\n                  color: \"red\"\n                },\n                scaleLabel: {   // To format the scale Lebel\n                    display: true,\n                    labelString: 'X axe name',\n                    fontColor:'green',\n                    fontSize:10\n                },\n                ticks: {\n                   display:true,\n                   fontColor: \"yellow\", // To format the ticks, coming on the axis/lables which we are passing.\n                   fontSize: 5\n                  }\n            }],\n            yAxes: [{\n                gridLines: {\n                  display: true ,\n                  color: \"red\"\n                },\n                scaleLabel: {\n                    display: true,\n                    labelString: 'Y axe name',\n                    fontColor: 'green',\n                    fontSize:10\n                },\n                ticks: {\n                  display:true,\n                      fontColor: \"green\",\n                      fontSize: 5\n                }\n            }]\n     }\n        }}\n      />\n    ) : null\n  );\n\n  return (\n    <div  className={styles.container}>\n      {country ? barChart : lineChart}\n    </div>\n  );\n};\n\nexport default Chart;\n\n\n\n\n/* options: { \n  legend: {\n      labels: {\n          fontColor: \"blue\",\n          fontSize: 18\n      }\n  } */","import React, { useState, useEffect } from 'react';\nimport { Form, Input } from 'reactstrap';\n\nimport { fetchCountries } from '../../api';\n\nimport styles from './CountryPicker.module.css';\n\nconst Countries = ({ handleCountryChange }) => {\n  const [countries, setCountries] = useState([]);\n\n  useEffect(() => {\n    const fetchAPI = async () => {\n      setCountries(await fetchCountries());\n    };\n\n    fetchAPI();\n  }, []);\n\n  return (\n    <Form className={styles.formControl}>\n      <div className={styles.box}>\n      <Input className={styles.select} type=\"select\" defaultValue=\"\" onChange={(e) => handleCountryChange(e.target.value)}>\n        <option  value=\"\">Global</option>\n        {countries.map((country, i) => <option key={i} value={country}>{country}</option>)}\n      </Input>\n      </div>\n    </Form>\n  );\n};\n\nexport default Countries;","import React from 'react';\nimport styles from './Footer.module.css';\nfunction Footer(props) {\n    return(\n    <div className=\"footer\">\n       \n            <div className=\"row justify-content-center\">             \n                \n               \n                <div className=\"col-12 col-sm-4 align-self-center\">\n                    <div className=\"text-center\">\n                        <a className=\"btn btn-social-icon btn-instagram\" href=\"http://www.facebook.com/profile.php?id=\"><i className=\"fa fa-facebook\"></i></a>&nbsp; \n                        <a className=\"btn btn-social-icon btn-linkedin\" href=\"http://www.linkedin.com/in/\"><i className=\"fa fa-linkedin\"></i></a>&nbsp; \n                        <a className=\"btn btn-social-icon btn-twitter\" href=\"http://twitter.com/\"><i className=\"fa fa-twitter\"></i></a>\n                    </div>\n                </div>\n            </div>\n            <div className=\"row justify-content-center\">          \n                <div className=\"col-auto\">\n                <br/>   <p style={{color:\"white\"}}>© Copyright 2020 Abhit Patil</p>\n                </div>\n            </div>\n       \n    </div>\n    )\n}\n\nexport default Footer;","import React from 'react';\nimport './App.css';\nimport Cards from './Component/Cards/Cards'\nimport {fetchData} from './api.js'\nimport Chart from './Component/Chart/Chart'\nimport Countries from './Component/CountryPicker/CountryPicker';\nimport Footer from './Component/Footter/Footer'\n\nexport class App extends React.Component {\n  constructor(props){\n    super(props);\n    this.state = {\n      data:{},\n      country:''\n    }\n    this.handleCountryChange = this.handleCountryChange.bind(this)\n  }\n\n   async componentDidMount() {\n    const data =await fetchData();\n\n    this.setState({ data});\n  }\n  handleCountryChange = async (country) => {\n    const data = await fetchData(country);\n\n    this.setState({ data, country: country });\n  }\n  \n  render(){\n    \n    console.log(this.state.data)\n    return (\n      <div className=\"App\">\n        <h1 className=\"Head\">Coronavirus</h1>\n          <Cards data={this.state.data} country={this.state.country}/>\n          <Countries  handleCountryChange={this.handleCountryChange} /><br/>\n       <Chart data={this.state.data} country={this.state.country} /> <br/>\n       <Footer/>\n       \n      </div>\n    );\n\n\n\n}\n\n\n\n\n\n \n}\n\nexport default App;\n/* \n\n */","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport 'font-awesome/css/font-awesome.css';\nimport 'bootstrap-social/bootstrap-social.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Cards_container__1KWuw\",\"infected\":\"Cards_infected__3JKOM\",\"recovered\":\"Cards_recovered__3fQQH\",\"deaths\":\"Cards_deaths__3_jLI\",\"fuck\":\"Cards_fuck__qn2lc\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"formControl\":\"CountryPicker_formControl__1Rc4M\",\"select\":\"CountryPicker_select__3_yc8\",\"card\":\"CountryPicker_card__2ZHZ8\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"card\":\"Card_card__i52qi\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Chart_container__3OxGV\"};"],"sourceRoot":""}